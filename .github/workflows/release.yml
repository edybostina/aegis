name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsodium-dev zlib1g-dev cmake g++

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install libsodium cmake zlib

      - name: Build
        shell: bash
        run: |
          chmod +x ./build.sh
          ./build.sh

      - name: Package artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist staging/aegis
          cp build/aegis staging/aegis/
          cp LICENSE README.md staging/aegis/
          # Try to strip to reduce size (ignore failure on macOS if codesigning)
          if command -v strip >/dev/null 2>&1; then strip staging/aegis/aegis || true; fi
          # Determine OS and arch for naming
          if [[ "$RUNNER_OS" == "macOS" ]]; then OS_NAME=macos; else OS_NAME=linux; fi
          ARCH=$(uname -m)
          VERSION=${GITHUB_REF_NAME:-dev}
          TAR=dist/aegis-${VERSION}-${OS_NAME}-${ARCH}.tar.gz
          # Ensure archive has a top-level 'aegis' folder
          tar -C staging -czf "$TAR" aegis
          # SHA256 checksum
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$TAR" > "$TAR.sha256"
          elif command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$TAR" > "$TAR.sha256"
          fi
          echo "Created $TAR"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: aegis-${{ runner.os }}-${{ runner.arch }}
          path: dist/*.tar.gz

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets
          merge-multiple: true

      - name: List downloaded assets
        run: ls -l release_assets

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_assets/*.tar.gz
            release_assets/*.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
